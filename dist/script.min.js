"use strict";

document.addEventListener("DOMContentLoaded", function () {
  [].slice.call(document.querySelectorAll("[data-bss-tooltip]")).map(function (e) {
    return new bootstrap.Tooltip(e);
  });
  var e = document.querySelectorAll("[data-bss-chart]");
  for (var t of e) t.chart = new Chart(t, JSON.parse(t.dataset.bssChart));
}, !1), function (_document$getElementB3) {
  console.log("THIS IS VISIBLE");
  var e = document.querySelector(".sidebar"),
    t = document.querySelectorAll("#sidebarToggle, #sidebarToggleTop");
  function n(e) {
    return new Promise(function (t, n) {
      var o = document.createElement("script");
      o.src = e, o.onload = t, o.onerror = n, document.head.appendChild(o);
    });
  }
  Promise.all([n("https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"), n("https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js"), n("https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js")]).then(function () {
    console.log("All libraries have finished loading"), function (_document$getElementB, _document$getElementB2) {
      window.jQuery;
      window.$ ? console.log("jQuery is loaded") : console.log("jQuery is not loaded");
      if (e) {
        e.querySelector(".collapse");
        var n = [].slice.call(document.querySelectorAll(".sidebar .collapse")).map(function (e) {
          return new bootstrap.Collapse(e, {
            toggle: !1
          });
        });
        for (var o of t) o.addEventListener("click", function (t) {
          if (document.body.classList.toggle("sidebar-toggled"), e.classList.toggle("toggled"), e.classList.contains("toggled")) for (var o of n) o.hide();
        });
        window.addEventListener("resize", function () {
          if (Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0) < 768) for (var e of n) e.hide();
        });
      }
      var r = document.getElementById("erasure-type"),
        a = document.getElementById("year-selection");
      r && r.addEventListener("change", function () {
        "individual-years" === this.value ? a.style.display = "block" : a.style.display = "none";
      });
      var l = document.getElementById("years-to-export");
      (a = document.getElementById("exportSpecificYears")) && a.addEventListener("change", function () {
        this.checked ? l.style.display = "flex" : (l.style.display = "none", l.style.setProperty("display", "none", "important"));
      });
      function c(e) {
        let t,
          n = e,
          o = "";
        for (; n > 0;) t = (n - 1) % 26, o = String.fromCharCode(65 + t) + o, n = Math.floor((n - t) / 26);
        return o;
      }
      function i() {
        var e = document.querySelector("#column-management select");
        if (e) for (var t = e.options.length, n = document.querySelector("#column-management li"), o = (n.querySelector(".column-id").innerText, 2); o < t; o++) {
          var r = n.cloneNode(!0);
          r.id = "col-" + o;
          var a = r.querySelector(".column-id"),
            l = c(o);
          a.innerText = "Column " + l, r.querySelector('select[data-ls-ref="type"]').selectedIndex = o - 1, document.getElementById("column-management").appendChild(r);
        }
      }
      function s() {
        document.querySelectorAll(".draggable-element").forEach(e => {
          e.addEventListener("dragstart", function (t) {
            t.dataTransfer.setData("text/plain", ""), e.classList.add("dragging"), e.dataset.originalParent = e.parentNode.id;
          });
        }), document.addEventListener("dragend", function (e) {
          const t = document.querySelector(".dragging");
          t && (t.classList.remove("dragging"), t.dataset.originalParent = "");
        }), document.addEventListener("dragover", function (e) {
          e.preventDefault();
        }), document.addEventListener("drop", function (e) {
          e.preventDefault();
          const t = e.target.closest(".draggable-element"),
            n = document.querySelector(".dragging");
          if (t && n && t !== n) {
            const e = document.getElementById(n.dataset.originalParent);
            t.parentNode.insertBefore(n, t.nextSibling), e.appendChild(t), d(t, n);
          }
        });
      }
      function d(e, t) {
        var n = JSON.parse(localStorage.getItem("VSE_settings")),
          o = e.parentElement,
          r = t.parentElement,
          a = y(o),
          l = y(r);
        console.log(a), console.log(l), n["column-management"][r.id] = l[r.id], n["column-management"][o.id] = a[o.id], localStorage.setItem("VSE_settings", JSON.stringify(n));
      }
      function u(e) {
        return "SELECT" === e.tagName || "INPUT" === e.tagName && "checkbox" !== e.type ? e.value : e.checked;
      }
      function g(e, t) {
        for (const n in t) "object" == typeof t[n] && null !== t[n] ? e[n] = g(e[n] || {}, t[n]) : e[n] = t[n];
        return e;
      }
      localStorage.getItem("VSE_settings") || localStorage.setItem("VSE_settings", JSON.stringify({})), i(), s(), (_document$getElementB = document.getElementById("pdf-import")) !== null && _document$getElementB !== void 0 && _document$getElementB.addEventListener("change", function () {
        this.files && this.files.length > 0 ? document.getElementById("pdf-import-button").disabled = !1 : document.getElementById("pdf-import-button").disabled = !0, this.files && this.files.length > 0 ? document.getElementById("pdf-import-button").classList.remove("disabled") : document.getElementById("pdf-import-button").classList.add("disabled");
      }), (_document$getElementB2 = document.getElementById("pdf-import-button")) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.addEventListener("click", function () {
        f(document.getElementById("pdf-import").files[0]).then(function (e) {
          var t = e.filter(e => "ASIN" !== e.asin);
          console.log("Extracted text:", t);
        }).catch(function (e) {
          console.error("Error extracting text:", e);
        });
      });
      const m = {
        38: "asin",
        126.91: "name",
        372.72: "orderDate",
        445.94: "titleTransferDate",
        519.16: "etv"
      };
      function f(e) {
        return new Promise((t, n) => {
          const o = new FileReader();
          o.onload = function (e) {
            const o = e.target.result;
            pdfjsLib.getDocument(o).promise.then(function (e) {
              const o = [],
                r = e.numPages,
                a = [];
              for (let t = 1; t <= r; t++) a.push(e.getPage(t).then(function (e) {
                return e.getTextContent();
              }));
              Promise.all(a).then(function (e) {
                e.forEach(function (e) {
                  var t,
                    n = {},
                    r = 0;
                  e.items.forEach(function (e, a, l) {
                    const c = e.transform[4],
                      i = m[c.toString()];
                    r > 3 && 38 == c && (r = 0, o.push(n), n = {}), i && (t === c ? n[i] += " " + e.str : n[i] = e.str, t = c), r++;
                  }), o.push(n);
                }), t(o);
              }).catch(function (e) {
                n(e);
              });
            }).catch(function (e) {
              n(e);
            });
          }, o.readAsArrayBuffer(e);
        });
      }
      function p() {
        const e = 7,
          t = {
            TableStyleLight: 21,
            TableStyleMedium: 28,
            TableStyleDark: 11
          };
        var n = e;
        const o = document.querySelector(".table-themes-list > .dropdown-menu");
        var r = 0;
        for (const g in t) {
          var a = o.querySelector(".dropdown-items").cloneNode(!0),
            l = o.querySelector(".dropdown-divider").cloneNode(!0),
            c = o.querySelector(".dropdown-header").cloneNode(!0);
          c.innerText = g.replace("TableStyle", "") + " Styles";
          var i,
            s = a.querySelector(".dropdown-item");
          const m = t[g];
          for (let t = 0; t < m; t++) {
            var d = -t % e * 138,
              u = -108 * Math.floor((t + n) / e);
            console.log("X: ".concat(d, " | Y: ").concat(u)), 0 == t ? i = s : (i = s.cloneNode(!0), a.append(i)), i.id = "".concat(g).concat(t), i.querySelector(".table-theme-preview").style.backgroundPosition = d + "px " + u + "px";
          }
          n += m, r > 0 && o.append(l), o.append(c), o.append(a), r++;
        }
      }
      function y(e) {
        const t = e.id,
          n = {};
        e.querySelectorAll("[data-ls-ref]").forEach(e => {
          const t = e.dataset.lsRef,
            o = "INPUT" === e.tagName && "checkbox" === e.type ? e.checked : e.value;
          n[t] = o;
        });
        const o = {};
        return o[t] = n, o;
      }
      function h(e, t) {
        e.querySelectorAll("[data-ls-ref]");
        Object.keys(t).forEach(n => {
          const o = t[n];
          o && Object.keys(o).forEach(t => {
            const n = e.querySelector("[data-ls-ref=\"".concat(t, "\"]"));
            n && ("INPUT" === n.tagName && "checkbox" === n.type ? n.checked = o[t] : n.value = o[t]);
          });
        });
      }
      function S(e) {
        return "".concat(e.getFullYear(), "-").concat(String(e.getMonth() + 1).padStart(2, "0"), "-").concat(String(e.getDate()).padStart(2, "0"));
      }
      p(), document.querySelectorAll(".table-themes-list .dropdown-item").forEach(function (e) {
        e.addEventListener("click", function () {});
      }), document.querySelectorAll("#column-management .list-group-item").forEach(function (e) {
        const t = e.closest(".list-group").id;
        e.querySelectorAll("select, input").forEach(function (n) {
          var o = JSON.parse(localStorage.getItem("VSE_settings"));
          const r = n.closest(".list-group-item").id,
            a = n.dataset.lsRef,
            l = o && (o[t] || o[r] || o[a]) && (o[t][r] && o[t][r][a] || o[t][a]);
          if (void 0 !== l) "SELECT" === n.tagName || "INPUT" === n.tagName && "checkbox" !== n.type ? n.value = l : n.checked = l;else {
            var c = {};
            c[t] = {}, "" !== r ? (c[t][r] = {}, c[t][r][a] = u(n)) : "" == t ? (c[r] = {}, c[t][r][a] = u(n)) : c[t][a] = u(n);
            const e = g(o, c);
            localStorage.setItem("VSE_settings", JSON.stringify(e));
          }
          n.addEventListener("change", function () {
            var o = JSON.parse(localStorage.getItem("VSE_settings")),
              l = {};
            l[t] = {};
            var c = u(n),
              i = this,
              s = this.closest(".list-group-item").id;
            if (console.log("comparingToId: " + s), console.log("itemId: " + r), i.classList.contains("data-type-name")) {
              var d,
                m = e.closest(".list-group").querySelectorAll(".list-group-item");
              for (let e = 0; e < m.length; e++) if (s !== m[e].id && m[e].querySelector(".data-type-name").value === i.value) {
                d = m[e];
                break;
              }
              if (s !== d.id && d.querySelector(".data-type-name").value === i.value) {
                var f = o[t][s][a];
                i.value = f;
                var p = y(e),
                  S = y(d);
                console.log(p), console.log(S), h(e, S), h(d, p);
                var v = o[t][s],
                  E = o[t][d.id];
                l[t][s] = E, l[t][d.id] = v;
              }
            } else "" !== r ? (l[t][s] = {}, l[t][s][a] = c) : "" == t ? (l[s] = {}, l[t][s][a] = c) : l[t][a] = c;
            console.log("This is settings to update"), console.log(l);
            const b = g(JSON.parse(localStorage.getItem("VSE_settings")), l);
            localStorage.setItem("VSE_settings", JSON.stringify(b));
          });
        });
      }), document.querySelectorAll(".custom-export-range").forEach(function (e) {
        var t;
        if ("start" === e.dataset.inputName) {
          var n = new Date();
          const e = 864e5;
          t = S(new Date(n.getTime() - e));
        } else t = S(new Date());
        e.max = t;
      });
    }();
  }).catch(function (e) {
    console.error("Error loading scripts:", e);
  }), (_document$getElementB3 = document.getElementById("email-import")) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.addEventListener("change", function (e) {
    const t = e.target.files[0];
    if (!t) return void console.error("No file selected");
    if (!t.name.endsWith(".zip")) return void console.error("Please select a .zip file");
    new JSZip().loadAsync(t).then(function (e) {
      console.log("Zip file loaded successfully"), e.forEach(function (e, t) {
        t.async("string").then(function (t) {
          console.log("File:", e), console.log("Content:", t), document.getElementById("output").innerHTML += "<p>".concat(e, ": ").concat(t, "</p>");
        });
      });
    }).catch(function (e) {
      console.error("Error reading zip file:", e);
    });
  });
}();
//# sourceMappingURL=script.min.js.map