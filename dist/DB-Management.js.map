{"version":3,"file":"DB-Management.js","names":["_react","require","orderDb","exports","configDb","orderStore","dbVersion","initDb","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","onerror","console","error","PullAllData","callback","window","transaction","getAllRequest","getAll","oncomplete","close","ExportDbToJson","jsonData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getFileSizes","groupedItems","forEach","item","year","Date","parseInt","orderDate","getFullYear","push","groupedFileSize","groupSize","reduce","acc","TextEncoder","encode","length","size","unit","toFixed","concat","log","openDatabase","fetchDataFromDB","key","keyName","Promise","resolve","reject","getRequest","index","get","retrievedObject","updateObjectKeysInDB","updatedKeys","existingObject","putRequest","put","addOrderToStore","data","add","addedObject"],"sources":["../src/DB-Management.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n\r\nconst orderDb = 'VSE_DB';\r\nconst configDb = 'VSEConfig';\r\nconst orderStore = 'orders';\r\nconst dbVersion = 1;\r\n\r\nfunction initDb() {\r\n    const request = indexedDB.open(orderDb, dbVersion);\r\n\r\n    request.onupgradeneeded = function(event) {\r\n        const db = event.target.result;\r\n\r\n        //const objectStore = db.createObjectStore(orderStore, { keyPath: 'orderID' });\r\n        const objectStore = db.createObjectStore(orderStore, { keyPath: 'asin' });\r\n\r\n        // Create or modify indexes for properties of orders\r\n        objectStore.createIndex('asin', 'asin', { unique: true });\r\n        objectStore.createIndex('name', 'name', { unique: false });\r\n        objectStore.createIndex('orderID', 'orderID', { unique: true });\r\n        objectStore.createIndex('orderDate', 'orderDate', { unique: false });\r\n        objectStore.createIndex('etv', 'etv', { unique: false });\r\n        objectStore.createIndex('excluded', 'excluded', { unique: false });\r\n        objectStore.createIndex('reason', 'reason', { unique: false });\r\n        objectStore.createIndex('reviewID', 'reviewID', { unique: true });\r\n    };\r\n\r\n    request.onsuccess = function(event) {\r\n        const db = event.target.result;\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        console.error('Error opening IndexedDB', event);\r\n    };\r\n}\r\n\r\n\r\n\r\nconst PullAllData = async (callback) => {\r\n    const request = window.indexedDB.open(orderDb);\r\n\r\n    request.onsuccess = function(event) {\r\n        const db = event.target.result;\r\n        const transaction = db.transaction('orders', 'readonly');\r\n        const objectStore = transaction.objectStore('orders');\r\n        const getAllRequest = objectStore.getAll();\r\n\r\n        getAllRequest.onsuccess = function(event) {\r\n            callback(event);\r\n        };\r\n\r\n        getAllRequest.onerror = function(event) {\r\n            callback(event);\r\n        };\r\n\r\n        transaction.oncomplete = function() {\r\n            db.close();\r\n        };\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        console.error(\"Error opening database:\", event.target.error);\r\n    };\r\n}\r\n\r\n\r\n/*\r\nconst PullAllData = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const request = window.indexedDB.open(orderDb);\r\n\r\n        request.onsuccess = function(event) {\r\n            const db = event.target.result;\r\n            const transaction = db.transaction('orders', 'readonly');\r\n            const objectStore = transaction.objectStore('orders');\r\n            const getAllRequest = objectStore.getAll();\r\n\r\n            getAllRequest.onsuccess = function(event) {\r\n                resolve(event.target.result); // Resolve with the result\r\n            };\r\n\r\n            getAllRequest.onerror = function(event) {\r\n                reject(event.target.error); // Reject with the error\r\n            };\r\n\r\n            transaction.oncomplete = function() {\r\n                db.close();\r\n            };\r\n        };\r\n\r\n        request.onerror = function(event) {\r\n            reject(event.target.error); // Reject with the error\r\n        };\r\n    });\r\n};\r\n*/\r\n\r\n\r\nfunction ExportDbToJson(event) {\r\n    if (!event.target.error) {\r\n\r\n        // Going with the fancy indented output just because it looks cleaner\r\n        const jsonData = JSON.stringify(event.target.result, null, 2);\r\n        const blob = new Blob([jsonData], {type: 'application/json'});\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        // Create a link element\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = 'VSE Database.json'; // Default file name\r\n\r\n        // Append the link to the document body and trigger a click event to download the file\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        // Clean up: remove the link and revoke the Blob URL\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n    }\r\n}\r\n\r\n\r\nexport function getFileSizes(event) {\r\n    // Group items by year based on orderDate\r\n    const groupedItems = {};\r\n    event.target.result.forEach(item => {\r\n        const year = new Date(parseInt(item.orderDate)).getFullYear();\r\n        if (!groupedItems[year]) {\r\n            groupedItems[year] = [];\r\n        }\r\n        groupedItems[year].push(item);\r\n    });\r\n\r\n    // Calculate file size for each group\r\n    const groupedFileSize = {};\r\n    for (const year in groupedItems) {\r\n        const groupSize = groupedItems[year].reduce((acc, item) => acc + (new TextEncoder().encode(JSON.stringify(item)).length), 0);\r\n        groupedFileSize[year] = groupSize;\r\n    }\r\n\r\n    // Display converted file size metric\r\n    for (const year in groupedFileSize) {\r\n        let size = groupedFileSize[year];\r\n        let unit = 'bytes';\r\n        if (size >= 1024 * 1024 * 1024) {\r\n            size = (size / (1024 * 1024 * 1024)).toFixed(2);\r\n            unit = 'GB';\r\n        } else if (size >= 1024 * 1024) {\r\n            size = (size / (1024 * 1024)).toFixed(2);\r\n            unit = 'MB';\r\n        } else if (size >= 1024) {\r\n            size = (size / 1024).toFixed(2);\r\n            unit = 'KB';\r\n        }\r\n        groupedFileSize[year] = `${size} ${unit}`;\r\n    }\r\n\r\n    console.log(groupedFileSize)\r\n    // Set state with the grouped file sizes\r\n    return groupedFileSize;\r\n}\r\n\r\n\r\n/*\r\nexport async function getFileSizes() {\r\n    return new Promise((resolve, reject) => {\r\n        const request = window.indexedDB.open(orderDb);\r\n\r\n        request.onsuccess = function (event) {\r\n            const db = event.target.result;\r\n            const transaction = db.transaction([orderStore], 'readonly');\r\n            const objectStore = transaction.objectStore(orderStore);\r\n            const getAllRequest = objectStore.getAll();\r\n\r\n            getAllRequest.onsuccess = function (event) {\r\n                const groupedItems = {};\r\n                event.target.result.forEach(item => {\r\n                    const year = new Date(parseInt(item.orderDate)).getFullYear();\r\n                    if (!groupedItems[year]) {\r\n                        groupedItems[year] = [];\r\n                    }\r\n                    groupedItems[year].push(item);\r\n                });\r\n\r\n                const groupedFileSize = {};\r\n                for (const year in groupedItems) {\r\n                    const groupSize = groupedItems[year].reduce((acc, item) => acc + (new TextEncoder().encode(JSON.stringify(item)).length), 0);\r\n                    groupedFileSize[year] = groupSize;\r\n                }\r\n\r\n                for (const year in groupedFileSize) {\r\n                    let size = groupedFileSize[year];\r\n                    let unit = 'bytes';\r\n                    if (size >= 1024 * 1024 * 1024) {\r\n                        size = (size / (1024 * 1024 * 1024)).toFixed(2);\r\n                        unit = 'GB';\r\n                    } else if (size >= 1024 * 1024) {\r\n                        size = (size / (1024 * 1024)).toFixed(2);\r\n                        unit = 'MB';\r\n                    } else if (size >= 1024) {\r\n                        size = (size / 1024).toFixed(2);\r\n                        unit = 'KB';\r\n                    }\r\n                    groupedFileSize[year] = `${size} ${unit}`;\r\n                }\r\n\r\n                resolve(groupedFileSize); // Resolve with the result\r\n            };\r\n\r\n            getAllRequest.onerror = function (event) {\r\n                reject(event.target.error); // Reject with the error\r\n            };\r\n\r\n            transaction.oncomplete = function () {\r\n                db.close();\r\n            };\r\n        };\r\n\r\n        request.onerror = function (event) {\r\n            reject(event.target.error); // Reject with the error\r\n        };\r\n    });\r\n}\r\n*/\r\n\r\nfunction openDatabase(callback) {\r\n    const request = indexedDB.open(orderDb, dbVersion);\r\n\r\n    request.onupgradeneeded = function(event) {\r\n        const db = event.target.result;\r\n        // Handle database upgrades if needed\r\n        // ...\r\n    };\r\n\r\n    request.onsuccess = function(event) {\r\n        const db = event.target.result;\r\n        callback(null, db);\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        const error = event.target.error;\r\n        callback(error);\r\n    };\r\n}\r\n\r\n/**\r\n * For checking if a product exists, not necessarily intended for updating info.\r\n * @param key\r\n * @param keyName\r\n * @returns {Promise<unknown>}\r\n */\r\nfunction fetchDataFromDB(key, keyName) {\r\n    return new Promise((resolve, reject) => {\r\n        openDatabase(function (error, db) {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n            const transaction = db.transaction([orderStore], 'readonly');\r\n            const objectStore = transaction.objectStore(orderStore);\r\n\r\n            let getRequest;\r\n\r\n            if (keyName) {\r\n                // if specified, search indexes for the value pertaining to the specified key name\r\n                const index = objectStore.index(keyName);\r\n                getRequest = index.get(key);\r\n            } else {\r\n                // the default\r\n                getRequest = objectStore.get(key);\r\n            }\r\n\r\n            getRequest.onsuccess = function (event) {\r\n                const retrievedObject = event.target.result;\r\n                resolve(retrievedObject);\r\n            };\r\n\r\n            getRequest.onerror = function (event) {\r\n                const error = event.target.error;\r\n                reject(error);\r\n            };\r\n        });\r\n    });\r\n}\r\n\r\n//\r\n/**\r\n * For updating existing orders (object stores).\r\n *\r\n * Note: For adding entirely new orders, use addOrderToStore().\r\n *\r\n * While this can technically be used to ADD new orders, it's better to just use this for updating.\r\n * @param key\r\n * @param updatedKeys\r\n * @param keyName\r\n * @returns {Promise<unknown>}\r\n */\r\nfunction updateObjectKeysInDB(key, updatedKeys, keyName) {\r\n    return new Promise((resolve, reject) => {\r\n        openDatabase(function (error, db) {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            const transaction = db.transaction([orderStore], 'readwrite');\r\n            const objectStore = transaction.objectStore(orderStore);\r\n\r\n            let getRequest;\r\n\r\n            if (keyName) {\r\n                // Will search indexes for the value pertaining to the specified keyName\r\n                const index = objectStore.index(keyName);\r\n                getRequest = index.get(key);\r\n            } else {\r\n                // the default\r\n                getRequest = objectStore.get(key);\r\n            }\r\n\r\n            //const getRequest = objectStore.get(key);\r\n\r\n            getRequest.onsuccess = function (event) {\r\n                const existingObject = event.target.result;\r\n\r\n                // Update specific keys of the existing object\r\n                for (const key in updatedKeys) {\r\n                    existingObject[key] = updatedKeys[key];\r\n                }\r\n\r\n                // Put the updated object back into the object store\r\n                const putRequest = objectStore.put(existingObject);\r\n\r\n                putRequest.onsuccess = function (event) {\r\n                    console.log(`Updated data for order ${key} successfully.`);\r\n                    //callback(null, `Object keys updated successfully: ${event.target.result}`);\r\n                };\r\n\r\n                putRequest.onerror = function (event) {\r\n                    const error = event.target.error;\r\n                    reject(error);\r\n                };\r\n            };\r\n\r\n            getRequest.onerror = function (event) {\r\n                const error = event.target.error;\r\n                reject(error);\r\n            };\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * For adding new orders to the database.\r\n * @param data\r\n * @returns {Promise<unknown>}\r\n */\r\nfunction addOrderToStore(data) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        openDatabase(function (error, db) {\r\n            if (error) {\r\n                reject(error);\r\n                return;\r\n            }\r\n\r\n            // Start a read-write transaction on the object store\r\n            const transaction = db.transaction([orderStore], 'readwrite');\r\n            const objectStore = transaction.objectStore(orderStore);\r\n\r\n            // Check if the data already exists in the object store\r\n            //const getRequest = objectStore.get(data.id);\r\n\r\n            const putRequest = objectStore.add(data);\r\n\r\n            putRequest.onsuccess = function (event) {\r\n                console.log(`Added new Vine order successfully.`);\r\n                //console.log(\"Data after put:\", data); // Log the data after the put operation\r\n\r\n                const addedObject = event.target.result;\r\n                console.log(addedObject)\r\n                resolve(addedObject);\r\n\r\n                //callback(null, `Object keys updated successfully: ${event.target.result}`);\r\n            };\r\n\r\n            putRequest.onerror = function (event) {\r\n                const error = event.target.error;\r\n                console.log(error)\r\n                reject(error);\r\n            };\r\n\r\n        });\r\n    });\r\n}\r\n\r\n\r\nexport { initDb, fetchDataFromDB, addOrderToStore, openDatabase, updateObjectKeysInDB, ExportDbToJson, PullAllData, orderDb, orderStore };"],"mappings":"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","ignoreList":[]}