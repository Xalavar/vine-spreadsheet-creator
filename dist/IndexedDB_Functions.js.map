{"version":3,"file":"IndexedDB_Functions.js","names":["_react","require","_FileParsingMethods","orderDb","exports","configDb","orderStore","dbVersion","initDb","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","onerror","console","error","ExportDataToFile","data","filetype","exportName","fileData","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","getFileSizes","groupedItems","forEach","item","year","Date","parseInt","orderDate","getFullYear","push","groupedFileSize","groupSize","reduce","acc","TextEncoder","encode","length","size","unit","toFixed","concat","log","OpenDatabase","Promise","resolve","reject","PerformDbOperation","action","key","keyType","ev","transaction","index","get","putOperation","HandlePutOperation","oncomplete","close","existingObject","putRequest","put"],"sources":["../src/IndexedDB_Functions.js"],"sourcesContent":["import {useEffect, useState} from \"react\";\r\nimport {exportSettingsToJson} from \"./FileParsingMethods\";\r\n\r\n\r\nconst orderDb = 'VSE_DB';\r\nconst configDb = 'VSEConfig';\r\nconst orderStore = 'orders';\r\nconst dbVersion = 1;\r\n\r\nfunction initDb() {\r\n    const request = indexedDB.open(orderDb, dbVersion);\r\n\r\n    request.onupgradeneeded = function(event) {\r\n        const db = event.target.result;\r\n\r\n        //const objectStore = db.createObjectStore(orderStore, { keyPath: 'orderID' });\r\n        const objectStore = db.createObjectStore(orderStore, { keyPath: 'asin' });\r\n\r\n        // Create or modify indexes for properties of orders\r\n        objectStore.createIndex('asin', 'asin', { unique: true });\r\n        objectStore.createIndex('name', 'name', { unique: false });\r\n        objectStore.createIndex('orderID', 'orderID', { unique: true });\r\n        objectStore.createIndex('orderDate', 'orderDate', { unique: false });\r\n        objectStore.createIndex('etv', 'etv', { unique: false });\r\n        objectStore.createIndex('excluded', 'excluded', { unique: false });\r\n        objectStore.createIndex('reason', 'reason', { unique: false });\r\n        objectStore.createIndex('reviewID', 'reviewID', { unique: true });\r\n    };\r\n\r\n    request.onsuccess = function(event) {\r\n        const db = event.target.result;\r\n    };\r\n\r\n    request.onerror = function(event) {\r\n        console.error('Error opening IndexedDB', event);\r\n    };\r\n}\r\n\r\n/**\r\n * For exporting files in different formats.\r\n *\r\n * @param data\r\n * @param {'application/json' | 'application/pdf' | 'application/xlsx' | 'application/zip'} filetype\r\n * @param {string} exportName\r\n * @constructor\r\n */\r\nfunction ExportDataToFile(data, filetype, exportName) {\r\n\r\n        // Going with the fancy indented output just because it looks cleaner\r\n        const fileData = JSON.stringify(data, null, 2);\r\n        const blob = new Blob([fileData], {type: filetype});\r\n        const url = URL.createObjectURL(blob);\r\n\r\n        // Create a link element\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = exportName;\r\n\r\n        // Append the link to the document body and trigger a click event to download the file\r\n        document.body.appendChild(link);\r\n        link.click();\r\n\r\n        // Clean up: remove the link and revoke the Blob URL\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n}\r\n\r\nexport function getFileSizes(event) {\r\n    //if (!event.target.error) {\r\n\r\n        // Group items by year based on orderDate\r\n        const groupedItems = {};\r\n        event.forEach(item => {\r\n            const year = new Date(parseInt(item.orderDate)).getFullYear();\r\n            if (!groupedItems[year]) {\r\n                groupedItems[year] = [];\r\n            }\r\n            groupedItems[year].push(item);\r\n        });\r\n\r\n        // Calculate file size for each group\r\n        const groupedFileSize = {};\r\n        for (const year in groupedItems) {\r\n            const groupSize = groupedItems[year].reduce((acc, item) => acc + (new TextEncoder().encode(JSON.stringify(item)).length), 0);\r\n            groupedFileSize[year] = groupSize;\r\n        }\r\n\r\n        // Display converted file size metric\r\n        for (const year in groupedFileSize) {\r\n            let size = groupedFileSize[year];\r\n            let unit = 'bytes';\r\n            if (size >= 1024 * 1024 * 1024) {\r\n                size = (size / (1024 * 1024 * 1024)).toFixed(2);\r\n                unit = 'GB';\r\n            } else if (size >= 1024 * 1024) {\r\n                size = (size / (1024 * 1024)).toFixed(2);\r\n                unit = 'MB';\r\n            } else if (size >= 1024) {\r\n                size = (size / 1024).toFixed(2);\r\n                unit = 'KB';\r\n            }\r\n            groupedFileSize[year] = `${size} ${unit}`;\r\n        }\r\n\r\n        console.log(groupedFileSize)\r\n        // Set state with the grouped file sizes\r\n        return groupedFileSize;\r\n\r\n    //}\r\n}\r\n\r\n/**\r\n * Opens the database, pretty self-evident.\r\n *\r\n * Only used for performing database operations and isn't meant to be used in a standalone manner.\r\n * @returns {Promise<unknown>}\r\n * @constructor\r\n */\r\nfunction OpenDatabase() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const request = indexedDB.open(orderDb, dbVersion);\r\n\r\n        request.onupgradeneeded = function(event) {\r\n            const db = event.target.result;\r\n            // Handle database upgrades if needed\r\n            // ...\r\n        };\r\n\r\n        request.onsuccess = function(event) {\r\n            resolve(event);\r\n        };\r\n\r\n        request.onerror = function(event) {\r\n            reject(event);\r\n            console.error('Error opening database: ', event);\r\n            //reject(event);\r\n        };\r\n    })\r\n\r\n}\r\n\r\n/**\r\n * For database operations, including adding, pulling, deleting, and updating items.\r\n *\r\n * Usage:\r\n *\r\n * 'add' requires data\r\n *\r\n * 'delete' requires ???\r\n *\r\n * 'get' requires key | optional: keyType\r\n *\r\n * 'getAll' requires N/A\r\n *\r\n * 'put' requires key, keyType, and data\r\n *\r\n * @param {'add' | 'delete' | 'get' | 'getAll' | 'put'} action\r\n * @param {number, string} key\r\n * @param {string} keyType\r\n * @param {object} data\r\n * @returns {Promise<unknown>}\r\n * @constructor\r\n */\r\nasync function PerformDbOperation(action, key, keyType, data) {\r\n    // If there's a keyType, assume that we need to search for the item\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            let ev = await OpenDatabase();\r\n\r\n            const db = ev.target.result;\r\n            const transaction = db.transaction([orderStore], 'readwrite');\r\n            const objectStore = transaction.objectStore(orderStore);\r\n\r\n            let request;\r\n            if (action === 'put' || action === 'get') {\r\n                if (keyType) {\r\n                    // Will search indexes for the value pertaining to the specified keyType, rather than the default (ASIN)\r\n                    // Intended for when we don't know the ASIN of the product\r\n                    const index = objectStore.index(keyType);\r\n                    request = index.get(key);\r\n                } else {\r\n                    // Assume 'key' is the ASIN\r\n                    request = objectStore.get(key);\r\n                }\r\n\r\n            } else if (action === 'getAll') {\r\n                request = objectStore[action]();\r\n            } else if (action === 'add') {\r\n                request = objectStore[action](data);\r\n            } else {\r\n                // Otherwise, use the standard method for database operations\r\n                request = objectStore[action](key);\r\n            }\r\n\r\n            request.onsuccess = async function (event) {\r\n                if (action === 'put') {\r\n                    // Special circumstances for PUT operations. Just to be extra careful we don't overwrite anything we don't want to\r\n                    // It's a put request, so handling this differently\r\n                    const putOperation = await HandlePutOperation(event, key, data, objectStore);\r\n                    console.log(`Updated data for order ${key} successfully.`);\r\n                    resolve(putOperation);\r\n\r\n                } else {\r\n                    // Otherwise, resolve the promise normally\r\n                    resolve(event.target.result);\r\n                }\r\n            };\r\n\r\n            request.onerror = function (event) {\r\n                reject(event);\r\n            };\r\n\r\n            transaction.oncomplete = function() {\r\n                console.log('transaction complete');\r\n                db.close();\r\n            };\r\n\r\n        } catch (error) {\r\n            console.error('Error: ', error);\r\n            reject(error)\r\n        }\r\n\r\n    });\r\n\r\n}\r\n\r\nfunction HandlePutOperation(event, key, data, objectStore) {\r\n\r\n    return new Promise(async (resolve, reject) => {\r\n        const existingObject = event.target.result;\r\n\r\n        // TODO: Perform extra checks to allow/disallow overwriting of specific keys, or just figure that out beforehand\r\n\r\n        // Update specific keys of the existing data\r\n        for (const key in data) {\r\n            existingObject[key] = data[key];\r\n        }\r\n\r\n        // Putting the updated data with any newly added keys back into the data store\r\n        const putRequest = objectStore.put(existingObject);\r\n\r\n        putRequest.onsuccess = function (event) {\r\n            resolve(event);\r\n        };\r\n\r\n        putRequest.onerror = function (event) {\r\n            reject(event);\r\n        };\r\n\r\n    })\r\n}\r\n\r\nexport { initDb, ExportDataToFile, PerformDbOperation, orderDb, orderStore };"],"mappings":"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","ignoreList":[]}